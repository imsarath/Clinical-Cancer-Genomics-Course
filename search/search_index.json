{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Clinical Cancer Genomics \u00b6 Introduction to Bioinformatics using NGS data. Briefly, the workshop covers the followings major topics: Working on the UNIX/LINUX command line Bioinformatic/NGS data formats and QC DNA variant calling workflow RNA sequence analysis workflow Detailed Syllabus \u00b6 Working on the unix/linux command line Command line navigation and related commands: cd, mkdir, rm, rmdir Commonly used linux tools: cp, mv, tar, less, more, head, tail, nano, grep, top, man Wildcards Ownership and permissions Symbolic links Piping commands Working on remote computing cluster Logging on to UPPMAX Booking resources Job templates, submission and queues Modules Learning Outcomes \u00b6 After this workshop you should be able to: Describe the basic principles of next generation sequencing. Use the Linux command line interface to manage simple file processing operations, and organize directory structures. Connect to and work on a remote high performance compute cluster. Apply programs in Linux for analysis of NGS data. Summarise the applications of current NGS technologies, including the weakness and strengths of the approaches and when it is appropriate to use which one of them. Explain common NGS file formats. Entry Requirements \u00b6 This is a national course open to PhD students, postdocs, group leaders and core facility staff. A background in genetics, cell biology, biomedicine, biochemistry, bioinformatics or comparable is desirable. To get the maximum benefit from the workshop we would like you to Have a research project where you are currently using next generation sequencing or are planning to use next generation sequencing. It is beneficial if you are directly performing analyses or if you have a support role and will be able to participate in a wide range of projects and transfer your knowledge to others.","title":"Course"},{"location":"#welcome-to-clinical-cancer-genomics","text":"Introduction to Bioinformatics using NGS data. Briefly, the workshop covers the followings major topics: Working on the UNIX/LINUX command line Bioinformatic/NGS data formats and QC DNA variant calling workflow RNA sequence analysis workflow","title":"Welcome to Clinical Cancer Genomics"},{"location":"#detailed-syllabus","text":"Working on the unix/linux command line Command line navigation and related commands: cd, mkdir, rm, rmdir Commonly used linux tools: cp, mv, tar, less, more, head, tail, nano, grep, top, man Wildcards Ownership and permissions Symbolic links Piping commands Working on remote computing cluster Logging on to UPPMAX Booking resources Job templates, submission and queues Modules","title":"Detailed Syllabus"},{"location":"#learning-outcomes","text":"After this workshop you should be able to: Describe the basic principles of next generation sequencing. Use the Linux command line interface to manage simple file processing operations, and organize directory structures. Connect to and work on a remote high performance compute cluster. Apply programs in Linux for analysis of NGS data. Summarise the applications of current NGS technologies, including the weakness and strengths of the approaches and when it is appropriate to use which one of them. Explain common NGS file formats.","title":"Learning Outcomes"},{"location":"#entry-requirements","text":"This is a national course open to PhD students, postdocs, group leaders and core facility staff. A background in genetics, cell biology, biomedicine, biochemistry, bioinformatics or comparable is desirable. To get the maximum benefit from the workshop we would like you to Have a research project where you are currently using next generation sequencing or are planning to use next generation sequencing. It is beneficial if you are directly performing analyses or if you have a support role and will be able to participate in a wide range of projects and transfer your knowledge to others.","title":"Entry Requirements"},{"location":"introduction/","text":"Welcome to the tutorials! Here we will learn how to make a computational research project reproducible using several different tools, described in the figure below: The figure above gives an overview of the different parts of computational reproducibility (data, code, workflow and environment), as well as the various tools that are used for each part; Git is, arguably, integral to all of the parts, but we only listed it in the code section for a less cluttered figure. The course has a tutorial for each of the tools, all made so that they can be completed independently of each other. It is therefore perfectly possible to go through them in whatever order you prefer, but we suggest the following order: Git Conda Snakemake Nextflow R Markdown Jupyter Containers You will find the tutorials in the Modules section in the navigation menu. Please make sure to carefully follow the pre-course setup to install the tools and download the course material before starting with any of the tutorials. These will create quite a lot of files on your computer, some of which will actually take up a bit of storage space too. In order to remove any traces of these after completing the tutorials, please refer to the Take down section . Before going into the tutorials themselves, we first describe the case study from which the example data comes from. The case study \u00b6 We will be running a small bioinformatics project as a case study, and use that to exemplify the different steps of setting up a reproducible research project. To give you some context, the study background and analysis steps are briefly described below. Background \u00b6 The data is taken from Osmundson, Dewell, and Darst (2013) , who have studied methicillin-resistant Staphylococcus aureus (MRSA). MRSA is resistant to broad spectrum beta-lactam antibiotics and lead to difficult-to-treat infections in humans. Lytic bacteriophages have been suggested as potential therapeutic agents, or as the source of novel antibiotic proteins or peptides. One such protein, gp67, was identified as a transcription-inhibiting transcription factor with an antimicrobial effect. To identify S. aureus genes repressed by gp67, the authors expressed gp67 in S. aureus cells. RNA-seq was then performed on three S. aureus strains: RN4220 with pRMC2 with gp67 RN4220 with empty pRMC2 NCTC8325-4 Analysis \u00b6 The graph below shows the different steps of the analysis that are included in this project: The input files are: RNA-seq raw data (FASTQ files) for the three strains S. aureus genome sequence (a FASTA file) S. aureus genome annotation (a GFF file) The workflow itself will perform the following tasks: Downloading and indexing of the reference genome using Bowtie2 Downloading the raw FASTQ data from the Sequence Read Archive (SRA) Run some quality controls on the data using FastQC and MultiQC Align the raw data to the genome and calculate the gene expression using featureCounts Produce supplementary materials using data from quality controls, gene expression and the workflow figure shown above","title":"Introduction"},{"location":"introduction/#the-case-study","text":"We will be running a small bioinformatics project as a case study, and use that to exemplify the different steps of setting up a reproducible research project. To give you some context, the study background and analysis steps are briefly described below.","title":"The case study"},{"location":"introduction/#background","text":"The data is taken from Osmundson, Dewell, and Darst (2013) , who have studied methicillin-resistant Staphylococcus aureus (MRSA). MRSA is resistant to broad spectrum beta-lactam antibiotics and lead to difficult-to-treat infections in humans. Lytic bacteriophages have been suggested as potential therapeutic agents, or as the source of novel antibiotic proteins or peptides. One such protein, gp67, was identified as a transcription-inhibiting transcription factor with an antimicrobial effect. To identify S. aureus genes repressed by gp67, the authors expressed gp67 in S. aureus cells. RNA-seq was then performed on three S. aureus strains: RN4220 with pRMC2 with gp67 RN4220 with empty pRMC2 NCTC8325-4","title":"Background"},{"location":"introduction/#analysis","text":"The graph below shows the different steps of the analysis that are included in this project: The input files are: RNA-seq raw data (FASTQ files) for the three strains S. aureus genome sequence (a FASTA file) S. aureus genome annotation (a GFF file) The workflow itself will perform the following tasks: Downloading and indexing of the reference genome using Bowtie2 Downloading the raw FASTQ data from the Sequence Read Archive (SRA) Run some quality controls on the data using FastQC and MultiQC Align the raw data to the genome and calculate the gene expression using featureCounts Produce supplementary materials using data from quality controls, gene expression and the workflow figure shown above","title":"Analysis"},{"location":"lab-session/","text":"","title":"Lab Session"},{"location":"module/","text":"Lecture 1 : Sequencing evolution Introduction Exome sequencing vs WGS sequencing vs targeted sequencing PDF RNA sequencing vs targeted RNA sequening vs single cell sequencing PDF Lecture 2 : Cancer genome and mutational processes Mutational signatures Concept of cancer drivers Lecture 3 : Liquid biopsies A targeted sequencing assay Screening of localised disease Lecture 4 : Bioinformatics pipelines Snakemake Lecture 5 : HTC computing environments Slurm Lecture 6 : Calling somatic- and germline variation Copy-number alterations Ploidy Landmark CNA papers from ICGC/TCGA Lecture 7 : Variation for clinical use. How to curate somatic- and germline","title":"Lectures"},{"location":"pre-course-setup/","text":"All of the tutorials and the material in them is dependent on the GitHub repository for the course. The first step of the setup is thus to download all the files that you will need, which is done differently depending on which operating system you have. At the last day, you will have the opportunity to try out the different tools on one of your own projects. In case you don't want to use a project you are currently working on, we have prepared a small-scale project for you. If you would like to work on your own project, it would be great if you could have the code and data ready before Friday so that you have more time for the exercise. In case your analysis project contains computationally intense steps it may be good to scale them down for the sake of the exercise. You might, for example, subset your raw data to only contain a minuscule part of its original size. Setup for Mac / Linux users \u00b6 First, cd into a directory on your computer (or create one) where it makes sense to download the course directory. cd /path/to/your/directory git clone https://github.com/NBISweden/workshop-reproducible-research.git cd workshop-reproducible-research Tip If you want to revisit the material from an older instance of this course, you can do that using git checkout tags/<tag-name> , e.g. git checkout tags/course_1905 . To list all available tags, use git tag . Run this command after you have cd into workshop-reproducible-research as described above. If you do that, you probably also want to view the same older version of this website. Until spring 2021, the website was hosted at https://nbis-reproducible-research.readthedocs.io . Locate the version box in the bottom right corner of the website and select the corresponding version. Setup for Windows users \u00b6 Using a Windows computer for bioinformatic work has sadly not been ideal most of the time, but large advanced in recent years have made this quite feasible through the Windows 10 Linux subsystem . This is the only setup for Windows users that we allow for participants of this course, as all the material has been created and tested to work on Unix-based systems. Using the Linux subsystem will give you access to a full command-line bash shell based on Linux on your Windows 10 PC. For the difference between the Linux Bash Shell and the PowerShell on Windows 10, see e.g. this article . Install Bash on Windows 10, follow the instructions at e.g. one of these resources: Installing the Windows Subsystem and the Linux Bash Installing and using Linux Bash on Windows Installing Linux Bash on Windows Open a bash shell Linux terminal and clone the GitHub repository containing all files you will need for completing the tutorials as follows. First, cd into a directory on your computer (or create one) where it makes sense to download the course directory. Tip You can find the directory where the Linux distribution is storing all its files by typing explorer.exe . . This will launch the Windows File Explorer showing the current Linux directory. Alternatively, you can find the Windows C drive from within the bash shell Linux terminal by navigating to /mnt/c/ . cd /path/to/your/directory git clone https://github.com/NBISweden/workshop-reproducible-research.git cd workshop-reproducible-research Whenever a setup instruction specifies Mac or Linux ( i.e. only those two, with no alternative for Windows), please follow the Linux instructions. Tip If you want to revisit the material from an older instance of this course, you can do that using git checkout tags/<tag-name> , e.g. git checkout tags/course_1905 . To list all available tags, use git tag . Run this command after you have cd into workshop-reproducible-research as described above. If you do that, you probably also want to view the same older version of this website. Until spring 2021, the website was hosted at https://nbis-reproducible-research.readthedocs.io/en/latest/ . Locate the version box in the bottom right corner of the website and select the corresponding version. Installing Git \u00b6 Chances are that you already have git installed on your computer. You can check by running e.g. git --version . If you don't have git, install it following the instructions here . If you have a very old version of git you might want to update to a later version. Configure git \u00b6 If it is the first time you use git on your computer, you may want to configure it so that it is aware of your username and email. These should match those that you have registered on GitHub. This will make it easier when you want to sync local changes with your remote GitHub repository. git config --global user.name \"Mona Lisa\" git config --global user.email \"mona_lisa@gmail.com\" Tip If you have several accounts ( e.g. both a GitHub and Bitbucket account), and thereby several different usernames, you can configure git on a per-repository level. Change directory into the relevant local git repository and run git config user.name \"Mona Lisa\" . This will set the default username for that repository only. You will also need to configure the default branch name to be main instead of master : git config --global init.defaultBranch \"main\" The short version of why you need to do this is that GitHub uses main as the default branch while Git itself is still using master ; please read the box below for more information. The default branch name The default branch name for Git and many of the online resources for hosting Git repositories has traditionally been master , which historically comes from the \"master/slave\" repositories of BitKeeper . This has been heavily discussed and in 2020 the decision was made by many ( including GitHub ) to start using main instead. Any repository created with GitHub uses this new naming scheme since October of 2020, and Git itself is currently discussing implementing a similar change. Git did, however, introduce the ability to set the default branch name when using git init in version 2.28 , instead of using a hard-coded master . We at NBIS want to be a part of this change, so we have chosen to use main for this course. Installing Conda \u00b6 Conda is installed by downloading and executing an installer from the Conda website, but which version you need depends on your operating system: # Install Miniconda3 for 64-bit Mac curl -L https://repo.continuum.io/miniconda/Miniconda3-4.7.12.1-MacOSX-x86_64.sh -O bash Miniconda3-4.7.12.1-MacOSX-x86_64.sh rm Miniconda3-4.7.12.1-MacOSX-x86_64.sh # Install Miniconda3 for 64-bit Linux curl -L https://repo.continuum.io/miniconda/Miniconda3-4.7.12.1-Linux-x86_64.sh -O bash Miniconda3-4.7.12.1-Linux-x86_64.sh rm Miniconda3-4.7.12.1-Linux-x86_64.sh Attention! If you already have installed Conda but want to update, you should be able to simply run conda update conda and subsequently conda init , and skip the installation instructions below. The installer will ask you questions during the installation: Do you accept the license terms? (Yes) Do you accept the installation path or do you want to choose a different one? (Probably yes) Do you want to run conda init to setup Conda on your system? (Yes) Restart your shell so that the settings in ~/.bashrc / ~/.bash_profile can take effect. You can verify that the installation worked by running: conda --version Different Condas There are three Conda-related things you may have encountered: the first is Conda, the package and environment manager we've been talking about so far. Second is Miniconda , which is the installer for Conda. The third is Anaconda , which is a distribution of not only Conda, but also over 150 scientific Python packages. It's generally better to stick with only Conda, i.e. installing with Miniconda, rather than installing 3 GB worth of packages you may not even use. Configuring Conda \u00b6 Lastly, we will setup the default channels (from where packages will be searched for and downloaded if no channel is specified). conda config --add channels defaults conda config --add channels bioconda conda config --add channels conda-forge Installing Snakemake \u00b6 We will use Conda environments for the set up of this tutorial, but don't worry if you don't understand exactly what everything does - you'll learn all the details at the course. First make sure you're currently situated inside the tutorials directory ( workshop-reproducible-research/tutorials ) and then create the Conda environment like so: conda env create -f snakemake/environment.yml -n snakemake-env conda activate snakemake-env Check that Snakemake is installed correctly, for example by executing snakemake --help . This should output a list of available Snakemake settings. If you get bash: snakemake: command not found then you need to go back and ensure that the Conda steps were successful. Once you've successfully completed the above steps you can deactivate your Conda environment using conda deactivate and continue with the setup for the other tools. Note If you look inside snakemake/environment.yml you will see that we used the package snakemake-minimal . This is a slimmed down version that lack some features, in particular relating to cloud computing and interacting with remote providers such as Google Drive or Dropbox. This was done to speed up the installation process. Use the normal snakemake package if you need those features. Installing Nextflow \u00b6 We'll use Conda to install Nextflow as well: navigate to workshop-reproducible-research/tutorials and create the Conda environment: conda env create -f nextflow/environment.yml -n nextflow-env conda activate nextflow-env Check that Nextflow was installed correctly by running nextflow -version . Once you've successfully completed the installation you can deactive the environment using conda deactivate and continue with the other setups, as needed. Installing R Markdown \u00b6 We also use Conda to install R Markdown: make sure your working directory is in the tutorials directory ( workshop-reproducible-research/tutorials ) and install the necessary R packages defined in the environment.yml : conda env create -f rmarkdown/environment.yml -n rmarkdown-env You can then activate the environment followed by running RStudio in the background from the command line: conda activate rmarkdown-env rstudio & The sluggishness of Conda Some environments are inherently quite complicated in that they have many and varied dependencies, meaning that the search space for the entire dependency hierarchy becomes huge - leading to slow and sluggish installations. This is often the case for R environments. This can be improved by using Mamba, a faster wrapper around Conda. Simply run conda install -n base mamba to install Mamba in your base environment, and replace any conda command with mamba - except activating and deactivating environments, which still needs to be done using Conda. Once you've successfully completed the above steps you can deactivate your Conda environment using conda deactivate and continue with the setup for the other tools. Windows users In case you are having trouble installing R and RStudio using Conda, both run well directly on Windows and you may therefore want to install Windows versions of these software for this tutorial (if you haven't done so already). Conda is, however, the recommended way. If you're having issues with graphical applications, please have a look at this website ; scroll down to the \"Graphical applications\". RStudio and Conda In some cases RStudio doesn't play well with Conda due to differing libpaths. To fix this, first check the available library path by .libPaths() to make sure that it points to a path within your conda environment. It might be that .libPaths() shows multiple library paths, in which case R packages will be searched for by R in all these locations. This means that your R session will not be completely isolated in your Conda environment and that something that works for you might not work for someone else using the same Conda environment, simply because you had additional packages installed in the second library location. One way to force R to just use the conda library path is to add a .Renviron file to the directory where you start R with these lines: ``` R_LIBS_USER=\"\" R_LIBS=\"\" ``` ... and restart RStudio. The rmarkdown/ directory in the course materials already contains this file, so you shouldn't have to add this yourself, but we mention it here for your future projects. Installing Jupyter \u00b6 Let's continue using Conda for installing software, since it's so convenient to do so! Move in the tutorials directory ( workshop-reproducible-research/tutorials ), create a Conda environment from the jupyter/environment.yml file and test the installation of Jupyter, like so: conda env create -f jupyter/environment.yml -n jupyter-env conda activate jupyter-env Once you've successfully completed the above steps you can deactivate your Conda environment using conda deactivate and continue with the setup for the other tools. Installing Docker \u00b6 Installing Docker is quite straightforward on Mac or Windows and a little more cumbersome on Linux. Note that Docker runs as root, which means that you have to have sudo privileges on your computer in order to install or run Docker. When you have finished installing docker, regardless of which OS you are on, please type docker --version to verify that the installation was successful! macOS \u00b6 Go to docker.com and select \"Get Docker for Mac (Stable)\". This will download a dmg file. Click on it once it's done to start the installation. This will open up a window where you can drag the Docker.app to Applications. Close the window and click the Docker app from the Applications menu. Now it's basically just to click \"next\" a couple of times and we should be good to go. You can find the Docker icon in the menu bar in the upper right part of the screen. Linux \u00b6 How to install Docker differs a bit depending on your Linux distribution, but the steps are the same. Please follow the instructions for your distribution on https://docs.docker.com/engine/install/#server . Tip As mentioned before, Docker needs to run as root. You can achieve this by prepending all Docker commands with sudo . This is the approach that we will take in this tutorial, since the set up becomes a little simpler that way. If you plan on continuing using Docker you can get rid of this by adding your user to the group docker . Here are instructions for how to do this: https://docs.docker.com/engine/installation/linux/linux-postinstall/ . Windows \u00b6 In order to run Docker on Windows your computer must support Hardware Virtualization Technology and virtualization must be enabled. This is typically done in BIOS. Setting this is outside the scope of this tutorial, so we'll simply go ahead as if though it's enabled and hope that it works. On Windows 10 we will install Docker for Windows, which is available at docker.com . Click the link Download from Docker Hub , and select Get Docker . Once the download is complete, execute the file and follow the instructions . You can now start Docker from the Start menu. You can search for it if you cannot find it; the Docker whale icon should appear in the task bar. You will probably need to enable integration with the Linux subsystem, if you haven't done so during the installation of Docker Desktop. Right-click on the Docker whale icon in the task bar and select Settings . Choose Resources and select WPS integration . Enable integration with the Linux subsystem and click Apply & Restart ; also restart the Linux subsystem. Installing Singularity \u00b6 Installation of Singularity depends, again, on your operating system. When you have finished, regardless of your OS, please type singularity --version to verify that your installation was successful! macOS \u00b6 Please install Singularity by downloading and installing this DMG file (Alpha Preview version). Linux \u00b6 Follow the instructions here . Windows \u00b6 Installing on Windows requires running Singularity through a Vagrant Box, which may be tricky. See instructions here . Notes Last time we checked, the software \"Vagrant Manager\" was not available for download but the installation of Singularity was successful even without it. Version 6.1.28 of \"Virtual box for Windows\" may not work, please install version 6.1.26 from here in case you encounter problems when trying to start the Vagrant VirtualBox. The Vagrant VirtualBox with Singularity can be started on your Windows 10 PC like this: Open the Git Bash and move with cd into the folder vm-singularity where you installed Singularity Type vagrant up and once this has finished, verify that the Vagrant VirtualBox is running with vagrant status Now, type vagrant ssh , which will open the Vagrant VirtualBox The first time you open the Vagrant VirtualBox like this, you will have to download the course material to obtain a copy for the Singularity tutorial within the Vagrant VirtualBox by typing git clone https://github.com/NBISweden/workshop-reproducible-research.git","title":"Pre-course setup"},{"location":"pre-course-setup/#setup-for-mac-linux-users","text":"First, cd into a directory on your computer (or create one) where it makes sense to download the course directory. cd /path/to/your/directory git clone https://github.com/NBISweden/workshop-reproducible-research.git cd workshop-reproducible-research Tip If you want to revisit the material from an older instance of this course, you can do that using git checkout tags/<tag-name> , e.g. git checkout tags/course_1905 . To list all available tags, use git tag . Run this command after you have cd into workshop-reproducible-research as described above. If you do that, you probably also want to view the same older version of this website. Until spring 2021, the website was hosted at https://nbis-reproducible-research.readthedocs.io . Locate the version box in the bottom right corner of the website and select the corresponding version.","title":"Setup for Mac / Linux users"},{"location":"pre-course-setup/#setup-for-windows-users","text":"Using a Windows computer for bioinformatic work has sadly not been ideal most of the time, but large advanced in recent years have made this quite feasible through the Windows 10 Linux subsystem . This is the only setup for Windows users that we allow for participants of this course, as all the material has been created and tested to work on Unix-based systems. Using the Linux subsystem will give you access to a full command-line bash shell based on Linux on your Windows 10 PC. For the difference between the Linux Bash Shell and the PowerShell on Windows 10, see e.g. this article . Install Bash on Windows 10, follow the instructions at e.g. one of these resources: Installing the Windows Subsystem and the Linux Bash Installing and using Linux Bash on Windows Installing Linux Bash on Windows Open a bash shell Linux terminal and clone the GitHub repository containing all files you will need for completing the tutorials as follows. First, cd into a directory on your computer (or create one) where it makes sense to download the course directory. Tip You can find the directory where the Linux distribution is storing all its files by typing explorer.exe . . This will launch the Windows File Explorer showing the current Linux directory. Alternatively, you can find the Windows C drive from within the bash shell Linux terminal by navigating to /mnt/c/ . cd /path/to/your/directory git clone https://github.com/NBISweden/workshop-reproducible-research.git cd workshop-reproducible-research Whenever a setup instruction specifies Mac or Linux ( i.e. only those two, with no alternative for Windows), please follow the Linux instructions. Tip If you want to revisit the material from an older instance of this course, you can do that using git checkout tags/<tag-name> , e.g. git checkout tags/course_1905 . To list all available tags, use git tag . Run this command after you have cd into workshop-reproducible-research as described above. If you do that, you probably also want to view the same older version of this website. Until spring 2021, the website was hosted at https://nbis-reproducible-research.readthedocs.io/en/latest/ . Locate the version box in the bottom right corner of the website and select the corresponding version.","title":"Setup for Windows users"},{"location":"pre-course-setup/#installing-git","text":"Chances are that you already have git installed on your computer. You can check by running e.g. git --version . If you don't have git, install it following the instructions here . If you have a very old version of git you might want to update to a later version.","title":"Installing Git"},{"location":"pre-course-setup/#configure-git","text":"If it is the first time you use git on your computer, you may want to configure it so that it is aware of your username and email. These should match those that you have registered on GitHub. This will make it easier when you want to sync local changes with your remote GitHub repository. git config --global user.name \"Mona Lisa\" git config --global user.email \"mona_lisa@gmail.com\" Tip If you have several accounts ( e.g. both a GitHub and Bitbucket account), and thereby several different usernames, you can configure git on a per-repository level. Change directory into the relevant local git repository and run git config user.name \"Mona Lisa\" . This will set the default username for that repository only. You will also need to configure the default branch name to be main instead of master : git config --global init.defaultBranch \"main\" The short version of why you need to do this is that GitHub uses main as the default branch while Git itself is still using master ; please read the box below for more information. The default branch name The default branch name for Git and many of the online resources for hosting Git repositories has traditionally been master , which historically comes from the \"master/slave\" repositories of BitKeeper . This has been heavily discussed and in 2020 the decision was made by many ( including GitHub ) to start using main instead. Any repository created with GitHub uses this new naming scheme since October of 2020, and Git itself is currently discussing implementing a similar change. Git did, however, introduce the ability to set the default branch name when using git init in version 2.28 , instead of using a hard-coded master . We at NBIS want to be a part of this change, so we have chosen to use main for this course.","title":"Configure git"},{"location":"pre-course-setup/#installing-conda","text":"Conda is installed by downloading and executing an installer from the Conda website, but which version you need depends on your operating system: # Install Miniconda3 for 64-bit Mac curl -L https://repo.continuum.io/miniconda/Miniconda3-4.7.12.1-MacOSX-x86_64.sh -O bash Miniconda3-4.7.12.1-MacOSX-x86_64.sh rm Miniconda3-4.7.12.1-MacOSX-x86_64.sh # Install Miniconda3 for 64-bit Linux curl -L https://repo.continuum.io/miniconda/Miniconda3-4.7.12.1-Linux-x86_64.sh -O bash Miniconda3-4.7.12.1-Linux-x86_64.sh rm Miniconda3-4.7.12.1-Linux-x86_64.sh Attention! If you already have installed Conda but want to update, you should be able to simply run conda update conda and subsequently conda init , and skip the installation instructions below. The installer will ask you questions during the installation: Do you accept the license terms? (Yes) Do you accept the installation path or do you want to choose a different one? (Probably yes) Do you want to run conda init to setup Conda on your system? (Yes) Restart your shell so that the settings in ~/.bashrc / ~/.bash_profile can take effect. You can verify that the installation worked by running: conda --version Different Condas There are three Conda-related things you may have encountered: the first is Conda, the package and environment manager we've been talking about so far. Second is Miniconda , which is the installer for Conda. The third is Anaconda , which is a distribution of not only Conda, but also over 150 scientific Python packages. It's generally better to stick with only Conda, i.e. installing with Miniconda, rather than installing 3 GB worth of packages you may not even use.","title":"Installing Conda"},{"location":"pre-course-setup/#configuring-conda","text":"Lastly, we will setup the default channels (from where packages will be searched for and downloaded if no channel is specified). conda config --add channels defaults conda config --add channels bioconda conda config --add channels conda-forge","title":"Configuring Conda"},{"location":"pre-course-setup/#installing-snakemake","text":"We will use Conda environments for the set up of this tutorial, but don't worry if you don't understand exactly what everything does - you'll learn all the details at the course. First make sure you're currently situated inside the tutorials directory ( workshop-reproducible-research/tutorials ) and then create the Conda environment like so: conda env create -f snakemake/environment.yml -n snakemake-env conda activate snakemake-env Check that Snakemake is installed correctly, for example by executing snakemake --help . This should output a list of available Snakemake settings. If you get bash: snakemake: command not found then you need to go back and ensure that the Conda steps were successful. Once you've successfully completed the above steps you can deactivate your Conda environment using conda deactivate and continue with the setup for the other tools. Note If you look inside snakemake/environment.yml you will see that we used the package snakemake-minimal . This is a slimmed down version that lack some features, in particular relating to cloud computing and interacting with remote providers such as Google Drive or Dropbox. This was done to speed up the installation process. Use the normal snakemake package if you need those features.","title":"Installing Snakemake"},{"location":"pre-course-setup/#installing-nextflow","text":"We'll use Conda to install Nextflow as well: navigate to workshop-reproducible-research/tutorials and create the Conda environment: conda env create -f nextflow/environment.yml -n nextflow-env conda activate nextflow-env Check that Nextflow was installed correctly by running nextflow -version . Once you've successfully completed the installation you can deactive the environment using conda deactivate and continue with the other setups, as needed.","title":"Installing Nextflow"},{"location":"pre-course-setup/#installing-r-markdown","text":"We also use Conda to install R Markdown: make sure your working directory is in the tutorials directory ( workshop-reproducible-research/tutorials ) and install the necessary R packages defined in the environment.yml : conda env create -f rmarkdown/environment.yml -n rmarkdown-env You can then activate the environment followed by running RStudio in the background from the command line: conda activate rmarkdown-env rstudio & The sluggishness of Conda Some environments are inherently quite complicated in that they have many and varied dependencies, meaning that the search space for the entire dependency hierarchy becomes huge - leading to slow and sluggish installations. This is often the case for R environments. This can be improved by using Mamba, a faster wrapper around Conda. Simply run conda install -n base mamba to install Mamba in your base environment, and replace any conda command with mamba - except activating and deactivating environments, which still needs to be done using Conda. Once you've successfully completed the above steps you can deactivate your Conda environment using conda deactivate and continue with the setup for the other tools. Windows users In case you are having trouble installing R and RStudio using Conda, both run well directly on Windows and you may therefore want to install Windows versions of these software for this tutorial (if you haven't done so already). Conda is, however, the recommended way. If you're having issues with graphical applications, please have a look at this website ; scroll down to the \"Graphical applications\". RStudio and Conda In some cases RStudio doesn't play well with Conda due to differing libpaths. To fix this, first check the available library path by .libPaths() to make sure that it points to a path within your conda environment. It might be that .libPaths() shows multiple library paths, in which case R packages will be searched for by R in all these locations. This means that your R session will not be completely isolated in your Conda environment and that something that works for you might not work for someone else using the same Conda environment, simply because you had additional packages installed in the second library location. One way to force R to just use the conda library path is to add a .Renviron file to the directory where you start R with these lines: ``` R_LIBS_USER=\"\" R_LIBS=\"\" ``` ... and restart RStudio. The rmarkdown/ directory in the course materials already contains this file, so you shouldn't have to add this yourself, but we mention it here for your future projects.","title":"Installing R Markdown"},{"location":"pre-course-setup/#installing-jupyter","text":"Let's continue using Conda for installing software, since it's so convenient to do so! Move in the tutorials directory ( workshop-reproducible-research/tutorials ), create a Conda environment from the jupyter/environment.yml file and test the installation of Jupyter, like so: conda env create -f jupyter/environment.yml -n jupyter-env conda activate jupyter-env Once you've successfully completed the above steps you can deactivate your Conda environment using conda deactivate and continue with the setup for the other tools.","title":"Installing Jupyter"},{"location":"pre-course-setup/#installing-docker","text":"Installing Docker is quite straightforward on Mac or Windows and a little more cumbersome on Linux. Note that Docker runs as root, which means that you have to have sudo privileges on your computer in order to install or run Docker. When you have finished installing docker, regardless of which OS you are on, please type docker --version to verify that the installation was successful!","title":"Installing Docker"},{"location":"pre-course-setup/#macos","text":"Go to docker.com and select \"Get Docker for Mac (Stable)\". This will download a dmg file. Click on it once it's done to start the installation. This will open up a window where you can drag the Docker.app to Applications. Close the window and click the Docker app from the Applications menu. Now it's basically just to click \"next\" a couple of times and we should be good to go. You can find the Docker icon in the menu bar in the upper right part of the screen.","title":"macOS"},{"location":"pre-course-setup/#linux","text":"How to install Docker differs a bit depending on your Linux distribution, but the steps are the same. Please follow the instructions for your distribution on https://docs.docker.com/engine/install/#server . Tip As mentioned before, Docker needs to run as root. You can achieve this by prepending all Docker commands with sudo . This is the approach that we will take in this tutorial, since the set up becomes a little simpler that way. If you plan on continuing using Docker you can get rid of this by adding your user to the group docker . Here are instructions for how to do this: https://docs.docker.com/engine/installation/linux/linux-postinstall/ .","title":"Linux"},{"location":"pre-course-setup/#windows","text":"In order to run Docker on Windows your computer must support Hardware Virtualization Technology and virtualization must be enabled. This is typically done in BIOS. Setting this is outside the scope of this tutorial, so we'll simply go ahead as if though it's enabled and hope that it works. On Windows 10 we will install Docker for Windows, which is available at docker.com . Click the link Download from Docker Hub , and select Get Docker . Once the download is complete, execute the file and follow the instructions . You can now start Docker from the Start menu. You can search for it if you cannot find it; the Docker whale icon should appear in the task bar. You will probably need to enable integration with the Linux subsystem, if you haven't done so during the installation of Docker Desktop. Right-click on the Docker whale icon in the task bar and select Settings . Choose Resources and select WPS integration . Enable integration with the Linux subsystem and click Apply & Restart ; also restart the Linux subsystem.","title":"Windows"},{"location":"pre-course-setup/#installing-singularity","text":"Installation of Singularity depends, again, on your operating system. When you have finished, regardless of your OS, please type singularity --version to verify that your installation was successful!","title":"Installing Singularity"},{"location":"pre-course-setup/#macos_1","text":"Please install Singularity by downloading and installing this DMG file (Alpha Preview version).","title":"macOS"},{"location":"pre-course-setup/#linux_1","text":"Follow the instructions here .","title":"Linux"},{"location":"pre-course-setup/#windows_1","text":"Installing on Windows requires running Singularity through a Vagrant Box, which may be tricky. See instructions here . Notes Last time we checked, the software \"Vagrant Manager\" was not available for download but the installation of Singularity was successful even without it. Version 6.1.28 of \"Virtual box for Windows\" may not work, please install version 6.1.26 from here in case you encounter problems when trying to start the Vagrant VirtualBox. The Vagrant VirtualBox with Singularity can be started on your Windows 10 PC like this: Open the Git Bash and move with cd into the folder vm-singularity where you installed Singularity Type vagrant up and once this has finished, verify that the Vagrant VirtualBox is running with vagrant status Now, type vagrant ssh , which will open the Vagrant VirtualBox The first time you open the Vagrant VirtualBox like this, you will have to download the course material to obtain a copy for the Singularity tutorial within the Vagrant VirtualBox by typing git clone https://github.com/NBISweden/workshop-reproducible-research.git","title":"Windows"},{"location":"schedule/","text":"Day 1 - 2021-01-24 \u00b6 Time Topic Responsible Location 9:00-9:45 Sequencing Evolution Introduction Johan Wargentin 9:45-10:00 Break 10:00-10:45 Sequencing Evolution Introduction Johan Wargentin 10:45-11:00 Break 11:00-11:45 Lab intro The clinical impact of analysing the cancer genome Felix + Johan Wargentin 11:45-12:00 Q&A Wargentin 12:00-13:00 Lunch 13:00 - 17:00 Lab session Johan & Rebecka & Sarath Wargentin Day 2 - 2021-01-25 \u00b6 Time Topic Responsible Location 9:00-9:45 Sequencing Evolution Introduction Johan Wargentin 9:45-10:00 Break 10:00-10:45 Sequencing Evolution Introduction Johan Wargentin 10:45-11:00 Break 11:00-11:45 Lab intro basic pipeline basic tools IGV Felix + Johan Wargentin 11:45-12:00 Q&A Wargentin 12:00-13:00 Lunch 13:00 - 17:00 Lab session Johan & Rebecka & Sarath Wargentin Day 3 - 2021-01-26 \u00b6 Time Topic Responsible Location 9:00-9:45 Sequencing Evolution Introduction Johan Wargentin 9:45-10:00 Break 10:00-10:45 Sequencing Evolution Introduction Johan Wargentin 10:45-11:00 Break 11:00-11:45 Lab intro (The clinical impact of analysing the cancer genome) Felix + Johan Wargentin 11:45-12:00 Q&A Wargentin 12:00-13:00 Lunch 13:00 - 17:00 Lab session Johan & Rebecka & Sarath Wargentin Day 4 - 2021-01-27 \u00b6 Time Topic Responsible Location 9:00-9:45 Sequencing Evolution Introduction Johan Wargentin 9:45-10:00 Break 10:00-10:45 Sequencing Evolution Introduction Johan Wargentin 10:45-11:00 Break 11:00-11:45 Lab intro (The clinical impact of analysing the cancer genome) Felix + Johan Wargentin 11:45-12:00 Q&A Wargentin 12:00-13:00 Lunch 13:00 - 17:00 Lab session Johan & Rebecka & Sarath Wargentin Day 5 - 2021-01-28 \u00b6 Time Topic Responsible Location 9:00-9:45 Sequencing Evolution Introduction Johan Wargentin 9:45-10:00 Break 10:00-10:45 Sequencing Evolution Introduction Johan Wargentin 10:45-11:00 Break 11:00-11:45 Lab intro (The clinical impact of analysing the cancer genome) Felix + Johan Wargentin 11:45-12:00 Q&A Wargentin 12:00-13:00 Lunch 13:00 - 17:00 Lab session Johan & Rebecka & Sarath Wargentin","title":"Schedule"},{"location":"schedule/#day-1-2021-01-24","text":"Time Topic Responsible Location 9:00-9:45 Sequencing Evolution Introduction Johan Wargentin 9:45-10:00 Break 10:00-10:45 Sequencing Evolution Introduction Johan Wargentin 10:45-11:00 Break 11:00-11:45 Lab intro The clinical impact of analysing the cancer genome Felix + Johan Wargentin 11:45-12:00 Q&A Wargentin 12:00-13:00 Lunch 13:00 - 17:00 Lab session Johan & Rebecka & Sarath Wargentin","title":"Day 1 - 2021-01-24"},{"location":"schedule/#day-2-2021-01-25","text":"Time Topic Responsible Location 9:00-9:45 Sequencing Evolution Introduction Johan Wargentin 9:45-10:00 Break 10:00-10:45 Sequencing Evolution Introduction Johan Wargentin 10:45-11:00 Break 11:00-11:45 Lab intro basic pipeline basic tools IGV Felix + Johan Wargentin 11:45-12:00 Q&A Wargentin 12:00-13:00 Lunch 13:00 - 17:00 Lab session Johan & Rebecka & Sarath Wargentin","title":"Day 2 - 2021-01-25"},{"location":"schedule/#day-3-2021-01-26","text":"Time Topic Responsible Location 9:00-9:45 Sequencing Evolution Introduction Johan Wargentin 9:45-10:00 Break 10:00-10:45 Sequencing Evolution Introduction Johan Wargentin 10:45-11:00 Break 11:00-11:45 Lab intro (The clinical impact of analysing the cancer genome) Felix + Johan Wargentin 11:45-12:00 Q&A Wargentin 12:00-13:00 Lunch 13:00 - 17:00 Lab session Johan & Rebecka & Sarath Wargentin","title":"Day 3 - 2021-01-26"},{"location":"schedule/#day-4-2021-01-27","text":"Time Topic Responsible Location 9:00-9:45 Sequencing Evolution Introduction Johan Wargentin 9:45-10:00 Break 10:00-10:45 Sequencing Evolution Introduction Johan Wargentin 10:45-11:00 Break 11:00-11:45 Lab intro (The clinical impact of analysing the cancer genome) Felix + Johan Wargentin 11:45-12:00 Q&A Wargentin 12:00-13:00 Lunch 13:00 - 17:00 Lab session Johan & Rebecka & Sarath Wargentin","title":"Day 4 - 2021-01-27"},{"location":"schedule/#day-5-2021-01-28","text":"Time Topic Responsible Location 9:00-9:45 Sequencing Evolution Introduction Johan Wargentin 9:45-10:00 Break 10:00-10:45 Sequencing Evolution Introduction Johan Wargentin 10:45-11:00 Break 11:00-11:45 Lab intro (The clinical impact of analysing the cancer genome) Felix + Johan Wargentin 11:45-12:00 Q&A Wargentin 12:00-13:00 Lunch 13:00 - 17:00 Lab session Johan & Rebecka & Sarath Wargentin","title":"Day 5 - 2021-01-28"},{"location":"course_details/sequencing/","text":"Exome sequencing vs WGS sequencing vs targeted sequencing \u00b6 PDF","title":"Exome sequencing vs WGS sequencing vs targeted sequencing"},{"location":"course_details/sequencing/#exome-sequencing-vs-wgs-sequencing-vs-targeted-sequencing","text":"PDF","title":"Exome sequencing vs WGS sequencing vs targeted sequencing"}]}